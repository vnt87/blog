---
import { ViewTransitions } from 'astro:transitions'
import '../styles/fonts.css'
import '../styles/global.css'

export interface Props {
  title: string
  description: string
  permalink: string
}

const { title, description, permalink } = Astro.props
const socialUrl = Astro.site.href + 'assets/social.png'
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width" />
<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={permalink} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={socialUrl} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={permalink} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={socialUrl} />

<ViewTransitions />

<!-- This is intentionally inlined to avoid FOUC -->
<script is:inline>
  function applyTheme() {
    const root = document.documentElement;
    try {
      const theme = localStorage.getItem('theme');
      if (
        theme === 'dark' ||
        (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)
      ) {
        root.classList.add('theme-dark');
      } else {
        root.classList.remove('theme-dark');
      }
    } catch (e) {
      // If localStorage is not available, fallback to system preference
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        root.classList.add('theme-dark');
      }
    }
  }

  // Initialize theme immediately to avoid FOUC
  applyTheme();

  // Re-apply theme after view transitions
  document.addEventListener('astro:after-swap', applyTheme);

  // Watch for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', applyTheme);
</script>
